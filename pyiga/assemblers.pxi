# file generated by generate-assemblers.py

################################################################################
# 2D Assemblers
################################################################################

cdef class BaseAssembler2D:
    cdef int nqp
    cdef size_t[2] ndofs
    cdef int[2] p
    cdef vector[ssize_t[:,::1]] meshsupp
    cdef list _asm_pool     # list of shared clones for multithreading

    cdef void base_init(self, kvs):
        assert len(kvs) == 2, "Assembler requires two knot vectors"
        self.nqp = max([kv.p for kv in kvs]) + 1
        self.ndofs[:] = [kv.numdofs for kv in kvs]
        self.p[:]     = [kv.p for kv in kvs]
        self.meshsupp = [kvs[k].mesh_support_idx_all() for k in range(2)]
        self._asm_pool = []

    cdef _share_base(self, BaseAssembler2D asm):
        asm.nqp = self.nqp
        asm.ndofs[:] = self.ndofs[:]
        asm.meshsupp = self.meshsupp

    cdef BaseAssembler2D shared_clone(self):
        return self     # by default assume thread safety

    cdef inline size_t to_seq(self, size_t[2] ii) nogil:
        # by convention, the order of indices is (y,x)
        return (ii[0]) * self.ndofs[1] + ii[1]

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.cdivision(True)
    cdef inline void from_seq(self, size_t i, size_t[2] out) nogil:
        out[1] = i % self.ndofs[1]
        i /= self.ndofs[1]
        out[0] = i

    cdef double assemble_impl(self, size_t[2] i, size_t[2] j) nogil:
        return -9999.99  # Not implemented

    cpdef double assemble(self, size_t i, size_t j):
        cdef size_t[2] I, J
        with nogil:
            self.from_seq(i, I)
            self.from_seq(j, J)
            return self.assemble_impl(I, J)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    cdef void multi_assemble_chunk(self, size_t[:,::1] idx_arr, double[::1] out) nogil:
        cdef size_t[2] I, J
        cdef size_t k

        for k in range(idx_arr.shape[0]):
            self.from_seq(idx_arr[k,0], I)
            self.from_seq(idx_arr[k,1], J)
            out[k] = self.assemble_impl(I, J)

    def multi_assemble(self, indices):
        """Assemble all entries given by `indices`.

        Args:
            indices: a sequence of `(i,j)` pairs or an `ndarray`
            of size `N x 2`.
        """
        cdef size_t[:,::1] idx_arr
        if isinstance(indices, np.ndarray):
            idx_arr = np.asarray(indices, order='C', dtype=np.uintp)
        else:   # possibly given as iterator
            idx_arr = np.array(list(indices), dtype=np.uintp)

        cdef double[::1] result = np.empty(idx_arr.shape[0])

        num_threads = pyiga.get_max_threads()
        if num_threads <= 1:
            self.multi_assemble_chunk(idx_arr, result)
        else:
            thread_pool = get_thread_pool()
            if not self._asm_pool:
                self._asm_pool = [self] + [self.shared_clone()
                        for i in range(1, thread_pool._max_workers)]

            results = thread_pool.map(_asm_chunk_2d,
                        self._asm_pool,
                        chunk_tasks(idx_arr, num_threads),
                        chunk_tasks(result, num_threads))
            list(results)   # wait for threads to finish
        return result

cpdef void _asm_chunk_2d(BaseAssembler2D asm, size_t[:,::1] idxchunk, double[::1] out):
    with nogil:
        asm.multi_assemble_chunk(idxchunk, out)


@cython.boundscheck(False)
@cython.wraparound(False)
cdef object generic_assemble_core_2d(BaseAssembler2D asm, bidx, bint symmetric=False):
    cdef unsigned[:, ::1] bidx0, bidx1
    cdef long mu0, mu1, MU0, MU1
    cdef double[:, ::1] entries

    bidx0, bidx1 = bidx
    MU0, MU1 = bidx0.shape[0], bidx1.shape[0]

    cdef size_t[::1] transp0, transp1
    if symmetric:
        transp0 = get_transpose_idx_for_bidx(bidx0)
        transp1 = get_transpose_idx_for_bidx(bidx1)
    else:
        transp0 = transp1 = None

    entries = np.zeros((MU0, MU1))

    cdef int num_threads = pyiga.get_max_threads()

    for mu0 in prange(MU0, num_threads=num_threads, nogil=True):
        _asm_core_2d_kernel(asm, symmetric,
            bidx0, bidx1,
            transp0, transp1,
            entries,
            mu0)
    return entries

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.initializedcheck(False)
cdef void _asm_core_2d_kernel(
    BaseAssembler2D asm,
    bint symmetric,
    unsigned[:, ::1] bidx0, unsigned[:, ::1] bidx1,
    size_t[::1] transp0, size_t[::1] transp1,
    double[:, ::1] entries,
    long _mu0
) nogil:
    cdef size_t[2] i, j
    cdef int diag0, diag1
    cdef double entry
    cdef long mu0, mu1, MU0, MU1

    mu0 = _mu0
    MU0, MU1 = bidx0.shape[0], bidx1.shape[0]

    i[0] = bidx0[mu0, 0]
    j[0] = bidx0[mu0, 1]

    if symmetric:
        diag0 = <int>j[0] - <int>i[0]
        if diag0 > 0:       # block is above diagonal?
            return

    for mu1 in range(MU1):
        i[1] = bidx1[mu1, 0]
        j[1] = bidx1[mu1, 1]

        if symmetric:
            diag1 = <int>j[1] - <int>i[1]
            if diag0 == 0 and diag1 > 0:
                continue

        entry = asm.assemble_impl(i, j)
        entries[mu0, mu1] = entry

        if symmetric:
            if diag0 != 0 or diag1 != 0:     # are we off the diagonal?
                entries[ transp0[mu0], transp1[mu1] ] = entry   # then also write into the transposed entry


cdef generic_assemble_2d_parallel(BaseAssembler2D asm, symmetric=False):
    mlb = MLBandedMatrix(
        tuple(asm.ndofs),
        tuple(asm.p)
    )
    X = generic_assemble_core_2d(asm, mlb.bidx, symmetric=symmetric)
    mlb.data = X
    return mlb.asmatrix()


# helper function for fast low-rank assembler
cdef double _entry_func_2d(size_t i, size_t j, void * data):
    return (<BaseAssembler2D>data).assemble(i, j)



cdef class BaseVectorAssembler2D:
    cdef int nqp
    cdef size_t[2] ndofs
    cdef vector[ssize_t[:,::1]] meshsupp

    cdef void base_init(self, kvs):
        assert len(kvs) == 2, "Assembler requires two knot vectors"
        self.nqp = max([kv.p for kv in kvs]) + 1
        self.ndofs[:] = [kv.numdofs for kv in kvs]
        self.meshsupp = [kvs[k].mesh_support_idx_all() for k in range(2)]

    cdef BaseAssembler2D shared_clone(self):
        return self     # by default assume thread safety

    cdef inline size_t to_seq(self, size_t[3] ii) nogil:
        return ((ii[0]) * self.ndofs[1] + ii[1]) * 2 + ii[2]

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.cdivision(True)
    cdef inline void from_seq(self, size_t i, size_t[3] out) nogil:
        out[2] = i % 2
        i /= 2
        out[1] = i % self.ndofs[1]
        i /= self.ndofs[1]
        out[0] = i

    cdef void assemble_impl(self, size_t[2] i, size_t[2] j, double result[]) nogil:
        pass


@cython.boundscheck(False)
@cython.wraparound(False)
cdef object generic_assemble_core_vec_2d(BaseVectorAssembler2D asm, bidx, bint symmetric=False):
    cdef unsigned[:, ::1] bidx0, bidx1
    cdef long mu0, mu1, MU0, MU1
    cdef double[:, :, ::1] entries

    bidx0, bidx1 = bidx
    MU0, MU1 = bidx0.shape[0], bidx1.shape[0]

    cdef size_t[::1] transp0, transp1
    if symmetric:
        transp0 = get_transpose_idx_for_bidx(bidx0)
        transp1 = get_transpose_idx_for_bidx(bidx1)
    else:
        transp0 = transp1 = None

    entries = np.zeros((MU0, MU1, 4))

    cdef int num_threads = pyiga.get_max_threads()

    for mu0 in prange(MU0, num_threads=num_threads, nogil=True):
        _asm_core_vec_2d_kernel(asm, symmetric,
            bidx0, bidx1,
            transp0, transp1,
            entries,
            mu0)
    return entries

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.initializedcheck(False)
cdef void _asm_core_vec_2d_kernel(
    BaseVectorAssembler2D asm,
    bint symmetric,
    unsigned[:, ::1] bidx0, unsigned[:, ::1] bidx1,
    size_t[::1] transp0, size_t[::1] transp1,
    double[:, :, ::1] entries,
    long _mu0
) nogil:
    cdef size_t[2] i, j
    cdef int diag0, diag1
    cdef long mu0, mu1, MU0, MU1
    cdef int row, col

    mu0 = _mu0
    MU0, MU1 = bidx0.shape[0], bidx1.shape[0]

    i[0] = bidx0[mu0, 0]
    j[0] = bidx0[mu0, 1]

    if symmetric:
        diag0 = <int>j[0] - <int>i[0]
        if diag0 > 0:       # block is above diagonal?
            return

    for mu1 in range(MU1):
        i[1] = bidx1[mu1, 0]
        j[1] = bidx1[mu1, 1]

        if symmetric:
            diag1 = <int>j[1] - <int>i[1]
            if diag0 == 0 and diag1 > 0:
                continue

        asm.assemble_impl(i, j, &entries[ mu0, mu1, 0 ])

        if symmetric:
            if diag0 != 0 or diag1 != 0:     # are we off the diagonal?
                for row in range(2):
                    for col in range(2):
                        entries[transp0[mu0], transp1[mu1], col*2 + row] = entries[mu0, mu1, row*2 + col]


cdef class MassAssembler2D(BaseAssembler2D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, ::1] W

    def __init__(self, kvs, geo):
        assert geo.dim == 2, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=0)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None] * gaussweights[1][None,:]
        self.W = np.empty(N + ())
        MassAssembler2D.precompute_fields(
                geo_jac,
                gauss_weights,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, :, ::1] _Jac,
            double[:, ::1] _GaussWeight,
            # output
            double[:, ::1] _W,
        ) nogil:
        cdef size_t n0 = _Jac.shape[0]
        cdef size_t n1 = _Jac.shape[1]
        cdef double* Jac
        cdef double GaussWeight
        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                Jac = &_Jac[i0, i1, 0, 0]
                GaussWeight = _GaussWeight[i0, i1]

                W = (GaussWeight * fabs(((Jac[0] * Jac[3]) - (Jac[1] * Jac[2]))))
                _W[i0, i1] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, ::1] _W,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef double v
        cdef double u
        cdef double W
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]

                v = (VDv0[1*i0+0] * VDv1[1*i1+0])
                u = (VDu0[1*i0+0] * VDu1[1*i1+0])
                result += ((u * v) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_i[2]
        cdef (double*) values_j[2]

        for k in range(2):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return MassAssembler2D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_j[0], values_j[1],
                values_i[0], values_i[1],
        )

cdef class StiffnessAssembler2D(BaseAssembler2D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, :, ::1] B

    def __init__(self, kvs, geo):
        assert geo.dim == 2, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None] * gaussweights[1][None,:]
        self.B = np.empty(N + (2, 2))
        StiffnessAssembler2D.precompute_fields(
                geo_jac,
                gauss_weights,
                self.B,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, :, ::1] _Jac,
            double[:, ::1] _GaussWeight,
            # output
            double[:, :, :, ::1] _B,
        ) nogil:
        cdef size_t n0 = _Jac.shape[0]
        cdef size_t n1 = _Jac.shape[1]
        cdef double _tmp2
        cdef double _tmp1
        cdef double JacInv[4]
        cdef double W
        cdef double* Jac
        cdef double GaussWeight
        cdef double* B
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                Jac = &_Jac[i0, i1, 0, 0]
                GaussWeight = _GaussWeight[i0, i1]
                B = &_B[i0, i1, 0, 0]

                _tmp2 = ((Jac[0] * Jac[3]) - (Jac[1] * Jac[2]))
                _tmp1 = (1.0 / _tmp2)
                JacInv[0] = (_tmp1 * Jac[3])
                JacInv[1] = (_tmp1 * -Jac[1])
                JacInv[2] = (_tmp1 * -Jac[2])
                JacInv[3] = (_tmp1 * Jac[0])
                W = (GaussWeight * fabs(_tmp2))
                B[0] = (W * ((JacInv[0] * JacInv[0]) + (JacInv[1] * JacInv[1])))
                B[1] = (W * ((JacInv[0] * JacInv[2]) + (JacInv[1] * JacInv[3])))
                B[3] = (W * ((JacInv[2] * JacInv[2]) + (JacInv[3] * JacInv[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, :, :, ::1] _B,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _B.shape[0]
        cdef size_t n1 = _B.shape[1]
        cdef double _tmp3
        cdef double _tmp4
        cdef double* B
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                B = &_B[i0, i1, 0, 0]

                _tmp3 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                _tmp4 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                result += ((((B[0] * _tmp3) + (B[1] * _tmp4)) * (VDv0[2*i0+0] * VDv1[2*i1+1])) + (((B[1] * _tmp3) + (B[3] * _tmp4)) * (VDv0[2*i0+1] * VDv1[2*i1+0])))
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_i[2]
        cdef (double*) values_j[2]

        for k in range(2):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return StiffnessAssembler2D.combine(
                self.B [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_j[0], values_j[1],
                values_i[0], values_i[1],
        )

cdef class HeatAssembler_ST2D(BaseAssembler2D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 2, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None] * gaussweights[1][None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        HeatAssembler_ST2D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, ::1] _GaussWeight,
            double[:, :, :, ::1] _Jac,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                GaussWeight = _GaussWeight[i0, i1]
                Jac = &_Jac[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _tmp2 = ((Jac[0] * Jac[3]) - (Jac[1] * Jac[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * Jac[3])
                JacInv[1] = (_tmp1 * -Jac[1])
                JacInv[2] = (_tmp1 * -Jac[2])
                JacInv[3] = (_tmp1 * Jac[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef double _dv_10
        cdef double v
        cdef double _du_10
        cdef double _du_01
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_10 = (VDv0[2*i0+0] * VDv1[2*i1+1])
                v = (VDv0[2*i0+0] * VDv1[2*i1+0])
                _du_10 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                _du_01 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                result += ((((JacInv[0] * _du_10) * (JacInv[0] * _dv_10)) + (_du_01 * v)) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_i[2]
        cdef (double*) values_j[2]

        for k in range(2):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return HeatAssembler_ST2D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_j[0], values_j[1],
                values_i[0], values_i[1],
        )

cdef class WaveAssembler_ST2D(BaseAssembler2D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 2, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=2)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None] * gaussweights[1][None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        WaveAssembler_ST2D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, ::1] _GaussWeight,
            double[:, :, :, ::1] _Jac,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                GaussWeight = _GaussWeight[i0, i1]
                Jac = &_Jac[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _tmp2 = ((Jac[0] * Jac[3]) - (Jac[1] * Jac[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * Jac[3])
                JacInv[1] = (_tmp1 * -Jac[1])
                JacInv[2] = (_tmp1 * -Jac[2])
                JacInv[3] = (_tmp1 * Jac[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef double _dv_01
        cdef double _dv_11
        cdef double _du_02
        cdef double _du_10
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_01 = (VDv0[3*i0+1] * VDv1[3*i1+0])
                _dv_11 = (VDv0[3*i0+1] * VDv1[3*i1+1])
                _du_02 = (VDu0[3*i0+2] * VDu1[3*i1+0])
                _du_10 = (VDu0[3*i0+0] * VDu1[3*i1+1])
                result += (((_du_02 * _dv_01) + ((JacInv[0] * _du_10) * (JacInv[0] * _dv_11))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[2] i, size_t[2] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_i[2]
        cdef (double*) values_j[2]

        for k in range(2):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return WaveAssembler_ST2D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_j[0], values_j[1],
                values_i[0], values_i[1],
        )

cdef class DivDivAssembler2D(BaseVectorAssembler2D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, ::1] W
    cdef double[:, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 2, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None] * gaussweights[1][None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (2, 2))
        DivDivAssembler2D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, ::1] _GaussWeight,
            double[:, :, :, ::1] _Jac,
            # output
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                GaussWeight = _GaussWeight[i0, i1]
                Jac = &_Jac[i0, i1, 0, 0]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _tmp2 = ((Jac[0] * Jac[3]) - (Jac[1] * Jac[2]))
                _tmp1 = (1.0 / _tmp2)
                W = (GaussWeight * fabs(_tmp2))
                _W[i0, i1] = W
                JacInv[0] = (_tmp1 * Jac[3])
                JacInv[1] = (_tmp1 * -Jac[1])
                JacInv[2] = (_tmp1 * -Jac[2])
                JacInv[3] = (_tmp1 * Jac[0])

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void combine(
            double[:, ::1] _W,
            double[:, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1,
            double* VDv0, double* VDv1,
            double result[]
        ) nogil:

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef double _dv_10
        cdef double _dv_01
        cdef double _tmp3
        cdef double _tmp6
        cdef double _du_10
        cdef double _du_01
        cdef double _tmp4
        cdef double _tmp5
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1

        for i0 in range(n0):
            for i1 in range(n1):
                W = _W[i0, i1]
                JacInv = &_JacInv[i0, i1, 0, 0]

                _dv_10 = (VDv0[2*i0+0] * VDv1[2*i1+1])
                _dv_01 = (VDv0[2*i0+1] * VDv1[2*i1+0])
                _tmp3 = ((JacInv[0] * _dv_10) + (JacInv[2] * _dv_01))
                _tmp6 = ((JacInv[1] * _dv_10) + (JacInv[3] * _dv_01))
                _du_10 = (VDu0[2*i0+0] * VDu1[2*i1+1])
                _du_01 = (VDu0[2*i0+1] * VDu1[2*i1+0])
                _tmp4 = ((JacInv[0] * _du_10) + (JacInv[2] * _du_01))
                _tmp5 = ((JacInv[1] * _du_10) + (JacInv[3] * _du_01))
                result[0] += ((_tmp3 * _tmp4) * W)
                result[1] += ((_tmp3 * _tmp5) * W)
                result[2] += ((_tmp6 * _tmp4) * W)
                result[3] += ((_tmp6 * _tmp5) * W)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef void assemble_impl(self, size_t[2] i, size_t[2] j, double result[]) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[2]
        cdef size_t g_end[2]
        cdef (double*) values_i[2]
        cdef (double*) values_j[2]

        for k in range(2):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return       # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        DivDivAssembler2D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1] ],
                values_j[0], values_j[1],
                values_i[0], values_i[1],
                result
        )

################################################################################
# 3D Assemblers
################################################################################

cdef class BaseAssembler3D:
    cdef int nqp
    cdef size_t[3] ndofs
    cdef int[3] p
    cdef vector[ssize_t[:,::1]] meshsupp
    cdef list _asm_pool     # list of shared clones for multithreading

    cdef void base_init(self, kvs):
        assert len(kvs) == 3, "Assembler requires two knot vectors"
        self.nqp = max([kv.p for kv in kvs]) + 1
        self.ndofs[:] = [kv.numdofs for kv in kvs]
        self.p[:]     = [kv.p for kv in kvs]
        self.meshsupp = [kvs[k].mesh_support_idx_all() for k in range(3)]
        self._asm_pool = []

    cdef _share_base(self, BaseAssembler3D asm):
        asm.nqp = self.nqp
        asm.ndofs[:] = self.ndofs[:]
        asm.meshsupp = self.meshsupp

    cdef BaseAssembler3D shared_clone(self):
        return self     # by default assume thread safety

    cdef inline size_t to_seq(self, size_t[3] ii) nogil:
        # by convention, the order of indices is (y,x)
        return ((ii[0]) * self.ndofs[1] + ii[1]) * self.ndofs[2] + ii[2]

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.cdivision(True)
    cdef inline void from_seq(self, size_t i, size_t[3] out) nogil:
        out[2] = i % self.ndofs[2]
        i /= self.ndofs[2]
        out[1] = i % self.ndofs[1]
        i /= self.ndofs[1]
        out[0] = i

    cdef double assemble_impl(self, size_t[3] i, size_t[3] j) nogil:
        return -9999.99  # Not implemented

    cpdef double assemble(self, size_t i, size_t j):
        cdef size_t[3] I, J
        with nogil:
            self.from_seq(i, I)
            self.from_seq(j, J)
            return self.assemble_impl(I, J)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    cdef void multi_assemble_chunk(self, size_t[:,::1] idx_arr, double[::1] out) nogil:
        cdef size_t[3] I, J
        cdef size_t k

        for k in range(idx_arr.shape[0]):
            self.from_seq(idx_arr[k,0], I)
            self.from_seq(idx_arr[k,1], J)
            out[k] = self.assemble_impl(I, J)

    def multi_assemble(self, indices):
        """Assemble all entries given by `indices`.

        Args:
            indices: a sequence of `(i,j)` pairs or an `ndarray`
            of size `N x 2`.
        """
        cdef size_t[:,::1] idx_arr
        if isinstance(indices, np.ndarray):
            idx_arr = np.asarray(indices, order='C', dtype=np.uintp)
        else:   # possibly given as iterator
            idx_arr = np.array(list(indices), dtype=np.uintp)

        cdef double[::1] result = np.empty(idx_arr.shape[0])

        num_threads = pyiga.get_max_threads()
        if num_threads <= 1:
            self.multi_assemble_chunk(idx_arr, result)
        else:
            thread_pool = get_thread_pool()
            if not self._asm_pool:
                self._asm_pool = [self] + [self.shared_clone()
                        for i in range(1, thread_pool._max_workers)]

            results = thread_pool.map(_asm_chunk_3d,
                        self._asm_pool,
                        chunk_tasks(idx_arr, num_threads),
                        chunk_tasks(result, num_threads))
            list(results)   # wait for threads to finish
        return result

cpdef void _asm_chunk_3d(BaseAssembler3D asm, size_t[:,::1] idxchunk, double[::1] out):
    with nogil:
        asm.multi_assemble_chunk(idxchunk, out)


@cython.boundscheck(False)
@cython.wraparound(False)
cdef object generic_assemble_core_3d(BaseAssembler3D asm, bidx, bint symmetric=False):
    cdef unsigned[:, ::1] bidx0, bidx1, bidx2
    cdef long mu0, mu1, mu2, MU0, MU1, MU2
    cdef double[:, :, ::1] entries

    bidx0, bidx1, bidx2 = bidx
    MU0, MU1, MU2 = bidx0.shape[0], bidx1.shape[0], bidx2.shape[0]

    cdef size_t[::1] transp0, transp1, transp2
    if symmetric:
        transp0 = get_transpose_idx_for_bidx(bidx0)
        transp1 = get_transpose_idx_for_bidx(bidx1)
        transp2 = get_transpose_idx_for_bidx(bidx2)
    else:
        transp0 = transp1 = transp2 = None

    entries = np.zeros((MU0, MU1, MU2))

    cdef int num_threads = pyiga.get_max_threads()

    for mu0 in prange(MU0, num_threads=num_threads, nogil=True):
        _asm_core_3d_kernel(asm, symmetric,
            bidx0, bidx1, bidx2,
            transp0, transp1, transp2,
            entries,
            mu0)
    return entries

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.initializedcheck(False)
cdef void _asm_core_3d_kernel(
    BaseAssembler3D asm,
    bint symmetric,
    unsigned[:, ::1] bidx0, unsigned[:, ::1] bidx1, unsigned[:, ::1] bidx2,
    size_t[::1] transp0, size_t[::1] transp1, size_t[::1] transp2,
    double[:, :, ::1] entries,
    long _mu0
) nogil:
    cdef size_t[3] i, j
    cdef int diag0, diag1, diag2
    cdef double entry
    cdef long mu0, mu1, mu2, MU0, MU1, MU2

    mu0 = _mu0
    MU0, MU1, MU2 = bidx0.shape[0], bidx1.shape[0], bidx2.shape[0]

    i[0] = bidx0[mu0, 0]
    j[0] = bidx0[mu0, 1]

    if symmetric:
        diag0 = <int>j[0] - <int>i[0]
        if diag0 > 0:       # block is above diagonal?
            return

    for mu1 in range(MU1):
        i[1] = bidx1[mu1, 0]
        j[1] = bidx1[mu1, 1]

        if symmetric:
            diag1 = <int>j[1] - <int>i[1]
            if diag0 == 0 and diag1 > 0:
                continue

        for mu2 in range(MU2):
            i[2] = bidx2[mu2, 0]
            j[2] = bidx2[mu2, 1]

            if symmetric:
                diag2 = <int>j[2] - <int>i[2]
                if diag0 == 0 and diag1 == 0 and diag2 > 0:
                    continue

            entry = asm.assemble_impl(i, j)
            entries[mu0, mu1, mu2] = entry

            if symmetric:
                if diag0 != 0 or diag1 != 0 or diag2 != 0:     # are we off the diagonal?
                    entries[ transp0[mu0], transp1[mu1], transp2[mu2] ] = entry   # then also write into the transposed entry


cdef generic_assemble_3d_parallel(BaseAssembler3D asm, symmetric=False):
    mlb = MLBandedMatrix(
        tuple(asm.ndofs),
        tuple(asm.p)
    )
    X = generic_assemble_core_3d(asm, mlb.bidx, symmetric=symmetric)
    mlb.data = X
    return mlb.asmatrix()


# helper function for fast low-rank assembler
cdef double _entry_func_3d(size_t i, size_t j, void * data):
    return (<BaseAssembler3D>data).assemble(i, j)



cdef class BaseVectorAssembler3D:
    cdef int nqp
    cdef size_t[3] ndofs
    cdef vector[ssize_t[:,::1]] meshsupp

    cdef void base_init(self, kvs):
        assert len(kvs) == 3, "Assembler requires two knot vectors"
        self.nqp = max([kv.p for kv in kvs]) + 1
        self.ndofs[:] = [kv.numdofs for kv in kvs]
        self.meshsupp = [kvs[k].mesh_support_idx_all() for k in range(3)]

    cdef BaseAssembler3D shared_clone(self):
        return self     # by default assume thread safety

    cdef inline size_t to_seq(self, size_t[4] ii) nogil:
        return (((ii[0]) * self.ndofs[1] + ii[1]) * self.ndofs[2] + ii[2]) * 3 + ii[3]

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.cdivision(True)
    cdef inline void from_seq(self, size_t i, size_t[4] out) nogil:
        out[3] = i % 3
        i /= 3
        out[2] = i % self.ndofs[2]
        i /= self.ndofs[2]
        out[1] = i % self.ndofs[1]
        i /= self.ndofs[1]
        out[0] = i

    cdef void assemble_impl(self, size_t[3] i, size_t[3] j, double result[]) nogil:
        pass


@cython.boundscheck(False)
@cython.wraparound(False)
cdef object generic_assemble_core_vec_3d(BaseVectorAssembler3D asm, bidx, bint symmetric=False):
    cdef unsigned[:, ::1] bidx0, bidx1, bidx2
    cdef long mu0, mu1, mu2, MU0, MU1, MU2
    cdef double[:, :, :, ::1] entries

    bidx0, bidx1, bidx2 = bidx
    MU0, MU1, MU2 = bidx0.shape[0], bidx1.shape[0], bidx2.shape[0]

    cdef size_t[::1] transp0, transp1, transp2
    if symmetric:
        transp0 = get_transpose_idx_for_bidx(bidx0)
        transp1 = get_transpose_idx_for_bidx(bidx1)
        transp2 = get_transpose_idx_for_bidx(bidx2)
    else:
        transp0 = transp1 = transp2 = None

    entries = np.zeros((MU0, MU1, MU2, 9))

    cdef int num_threads = pyiga.get_max_threads()

    for mu0 in prange(MU0, num_threads=num_threads, nogil=True):
        _asm_core_vec_3d_kernel(asm, symmetric,
            bidx0, bidx1, bidx2,
            transp0, transp1, transp2,
            entries,
            mu0)
    return entries

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.initializedcheck(False)
cdef void _asm_core_vec_3d_kernel(
    BaseVectorAssembler3D asm,
    bint symmetric,
    unsigned[:, ::1] bidx0, unsigned[:, ::1] bidx1, unsigned[:, ::1] bidx2,
    size_t[::1] transp0, size_t[::1] transp1, size_t[::1] transp2,
    double[:, :, :, ::1] entries,
    long _mu0
) nogil:
    cdef size_t[3] i, j
    cdef int diag0, diag1, diag2
    cdef long mu0, mu1, mu2, MU0, MU1, MU2
    cdef int row, col

    mu0 = _mu0
    MU0, MU1, MU2 = bidx0.shape[0], bidx1.shape[0], bidx2.shape[0]

    i[0] = bidx0[mu0, 0]
    j[0] = bidx0[mu0, 1]

    if symmetric:
        diag0 = <int>j[0] - <int>i[0]
        if diag0 > 0:       # block is above diagonal?
            return

    for mu1 in range(MU1):
        i[1] = bidx1[mu1, 0]
        j[1] = bidx1[mu1, 1]

        if symmetric:
            diag1 = <int>j[1] - <int>i[1]
            if diag0 == 0 and diag1 > 0:
                continue

        for mu2 in range(MU2):
            i[2] = bidx2[mu2, 0]
            j[2] = bidx2[mu2, 1]

            if symmetric:
                diag2 = <int>j[2] - <int>i[2]
                if diag0 == 0 and diag1 == 0 and diag2 > 0:
                    continue

            asm.assemble_impl(i, j, &entries[ mu0, mu1, mu2, 0 ])

            if symmetric:
                if diag0 != 0 or diag1 != 0 or diag2 != 0:     # are we off the diagonal?
                    for row in range(3):
                        for col in range(3):
                            entries[transp0[mu0], transp1[mu1], transp2[mu2], col*3 + row] = entries[mu0, mu1, mu2, row*3 + col]


cdef class MassAssembler3D(BaseAssembler3D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, ::1] W

    def __init__(self, kvs, geo):
        assert geo.dim == 3, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=0)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None,None] * gaussweights[1][None,:,None] * gaussweights[2][None,None,:]
        self.W = np.empty(N + ())
        MassAssembler3D.precompute_fields(
                geo_jac,
                gauss_weights,
                self.W,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, :, :, ::1] _Jac,
            double[:, :, ::1] _GaussWeight,
            # output
            double[:, :, ::1] _W,
        ) nogil:
        cdef size_t n0 = _Jac.shape[0]
        cdef size_t n1 = _Jac.shape[1]
        cdef size_t n2 = _Jac.shape[2]
        cdef double* Jac
        cdef double GaussWeight
        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    Jac = &_Jac[i0, i1, i2, 0, 0]
                    GaussWeight = _GaussWeight[i0, i1, i2]

                    W = (GaussWeight * fabs((((Jac[0] * ((Jac[4] * Jac[8]) - (Jac[5] * Jac[7]))) - (Jac[1] * ((Jac[3] * Jac[8]) - (Jac[5] * Jac[6])))) + (Jac[2] * ((Jac[3] * Jac[7]) - (Jac[4] * Jac[6]))))))
                    _W[i0, i1, i2] = W

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, :, ::1] _W,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef size_t n2 = _W.shape[2]
        cdef double v
        cdef double u
        cdef double W
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]

                    v = (VDv0[1*i0+0] * VDv1[1*i1+0] * VDv2[1*i2+0])
                    u = (VDu0[1*i0+0] * VDu1[1*i1+0] * VDu2[1*i2+0])
                    result += ((u * v) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_i[3]
        cdef (double*) values_j[3]

        for k in range(3):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return MassAssembler3D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_j[0], values_j[1], values_j[2],
                values_i[0], values_i[1], values_i[2],
        )

cdef class StiffnessAssembler3D(BaseAssembler3D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, :, :, ::1] B

    def __init__(self, kvs, geo):
        assert geo.dim == 3, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None,None] * gaussweights[1][None,:,None] * gaussweights[2][None,None,:]
        self.B = np.empty(N + (3, 3))
        StiffnessAssembler3D.precompute_fields(
                geo_jac,
                gauss_weights,
                self.B,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, :, :, ::1] _Jac,
            double[:, :, ::1] _GaussWeight,
            # output
            double[:, :, :, :, ::1] _B,
        ) nogil:
        cdef size_t n0 = _Jac.shape[0]
        cdef size_t n1 = _Jac.shape[1]
        cdef size_t n2 = _Jac.shape[2]
        cdef double _tmp3
        cdef double _tmp4
        cdef double _tmp5
        cdef double _tmp2
        cdef double _tmp1
        cdef double JacInv[9]
        cdef double W
        cdef double* Jac
        cdef double GaussWeight
        cdef double* B
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    Jac = &_Jac[i0, i1, i2, 0, 0]
                    GaussWeight = _GaussWeight[i0, i1, i2]
                    B = &_B[i0, i1, i2, 0, 0]

                    _tmp3 = ((Jac[4] * Jac[8]) - (Jac[5] * Jac[7]))
                    _tmp4 = ((Jac[3] * Jac[8]) - (Jac[5] * Jac[6]))
                    _tmp5 = ((Jac[3] * Jac[7]) - (Jac[4] * Jac[6]))
                    _tmp2 = (((Jac[0] * _tmp3) - (Jac[1] * _tmp4)) + (Jac[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((Jac[1] * Jac[8]) - (Jac[2] * Jac[7])))
                    JacInv[2] = (_tmp1 * ((Jac[1] * Jac[5]) - (Jac[2] * Jac[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((Jac[0] * Jac[8]) - (Jac[2] * Jac[6])))
                    JacInv[5] = (_tmp1 * -((Jac[0] * Jac[5]) - (Jac[2] * Jac[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((Jac[0] * Jac[7]) - (Jac[1] * Jac[6])))
                    JacInv[8] = (_tmp1 * ((Jac[0] * Jac[4]) - (Jac[1] * Jac[3])))
                    W = (GaussWeight * fabs(_tmp2))
                    B[0] = (W * (((JacInv[0] * JacInv[0]) + (JacInv[1] * JacInv[1])) + (JacInv[2] * JacInv[2])))
                    B[1] = (W * (((JacInv[0] * JacInv[3]) + (JacInv[1] * JacInv[4])) + (JacInv[2] * JacInv[5])))
                    B[2] = (W * (((JacInv[0] * JacInv[6]) + (JacInv[1] * JacInv[7])) + (JacInv[2] * JacInv[8])))
                    B[4] = (W * (((JacInv[3] * JacInv[3]) + (JacInv[4] * JacInv[4])) + (JacInv[5] * JacInv[5])))
                    B[5] = (W * (((JacInv[3] * JacInv[6]) + (JacInv[4] * JacInv[7])) + (JacInv[5] * JacInv[8])))
                    B[8] = (W * (((JacInv[6] * JacInv[6]) + (JacInv[7] * JacInv[7])) + (JacInv[8] * JacInv[8])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, :, :, :, ::1] _B,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _B.shape[0]
        cdef size_t n1 = _B.shape[1]
        cdef size_t n2 = _B.shape[2]
        cdef double _tmp6
        cdef double _tmp7
        cdef double _tmp8
        cdef double* B
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    B = &_B[i0, i1, i2, 0, 0]

                    _tmp6 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    _tmp7 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _tmp8 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    result += ((((((B[0] * _tmp6) + (B[1] * _tmp7)) + (B[2] * _tmp8)) * (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])) + ((((B[1] * _tmp6) + (B[4] * _tmp7)) + (B[5] * _tmp8)) * (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0]))) + ((((B[2] * _tmp6) + (B[5] * _tmp7)) + (B[8] * _tmp8)) * (VDv0[2*i0+1] * VDv1[2*i1+0] * VDv2[2*i2+0])))
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_i[3]
        cdef (double*) values_j[3]

        for k in range(3):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return StiffnessAssembler3D.combine(
                self.B [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_j[0], values_j[1], values_j[2],
                values_i[0], values_i[1], values_i[2],
        )

cdef class HeatAssembler_ST3D(BaseAssembler3D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 3, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None,None] * gaussweights[1][None,:,None] * gaussweights[2][None,None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        HeatAssembler_ST3D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, ::1] _GaussWeight,
            double[:, :, :, :, ::1] _Jac,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef size_t n2 = _GaussWeight.shape[2]
        cdef double _tmp3
        cdef double _tmp4
        cdef double _tmp5
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    GaussWeight = _GaussWeight[i0, i1, i2]
                    Jac = &_Jac[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _tmp3 = ((Jac[4] * Jac[8]) - (Jac[5] * Jac[7]))
                    _tmp4 = ((Jac[3] * Jac[8]) - (Jac[5] * Jac[6]))
                    _tmp5 = ((Jac[3] * Jac[7]) - (Jac[4] * Jac[6]))
                    _tmp2 = (((Jac[0] * _tmp3) - (Jac[1] * _tmp4)) + (Jac[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((Jac[1] * Jac[8]) - (Jac[2] * Jac[7])))
                    JacInv[2] = (_tmp1 * ((Jac[1] * Jac[5]) - (Jac[2] * Jac[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((Jac[0] * Jac[8]) - (Jac[2] * Jac[6])))
                    JacInv[5] = (_tmp1 * -((Jac[0] * Jac[5]) - (Jac[2] * Jac[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((Jac[0] * Jac[7]) - (Jac[1] * Jac[6])))
                    JacInv[8] = (_tmp1 * ((Jac[0] * Jac[4]) - (Jac[1] * Jac[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef size_t n2 = _W.shape[2]
        cdef double _dv_100
        cdef double _dv_010
        cdef double v
        cdef double _du_100
        cdef double _du_010
        cdef double _du_001
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_100 = (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])
                    _dv_010 = (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0])
                    v = (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+0])
                    _du_100 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    _du_010 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _du_001 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    result += ((((((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) * ((JacInv[0] * _dv_100) + (JacInv[3] * _dv_010))) + (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) * ((JacInv[1] * _dv_100) + (JacInv[4] * _dv_010)))) + (_du_001 * v)) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_i[3]
        cdef (double*) values_j[3]

        for k in range(3):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return HeatAssembler_ST3D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_j[0], values_j[1], values_j[2],
                values_i[0], values_i[1], values_i[2],
        )

cdef class WaveAssembler_ST3D(BaseAssembler3D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 3, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=2)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None,None] * gaussweights[1][None,:,None] * gaussweights[2][None,None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        WaveAssembler_ST3D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, ::1] _GaussWeight,
            double[:, :, :, :, ::1] _Jac,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef size_t n2 = _GaussWeight.shape[2]
        cdef double _tmp3
        cdef double _tmp4
        cdef double _tmp5
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    GaussWeight = _GaussWeight[i0, i1, i2]
                    Jac = &_Jac[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _tmp3 = ((Jac[4] * Jac[8]) - (Jac[5] * Jac[7]))
                    _tmp4 = ((Jac[3] * Jac[8]) - (Jac[5] * Jac[6]))
                    _tmp5 = ((Jac[3] * Jac[7]) - (Jac[4] * Jac[6]))
                    _tmp2 = (((Jac[0] * _tmp3) - (Jac[1] * _tmp4)) + (Jac[2] * _tmp5))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp3)
                    JacInv[1] = (_tmp1 * -((Jac[1] * Jac[8]) - (Jac[2] * Jac[7])))
                    JacInv[2] = (_tmp1 * ((Jac[1] * Jac[5]) - (Jac[2] * Jac[4])))
                    JacInv[3] = (_tmp1 * -_tmp4)
                    JacInv[4] = (_tmp1 * ((Jac[0] * Jac[8]) - (Jac[2] * Jac[6])))
                    JacInv[5] = (_tmp1 * -((Jac[0] * Jac[5]) - (Jac[2] * Jac[3])))
                    JacInv[6] = (_tmp1 * _tmp5)
                    JacInv[7] = (_tmp1 * -((Jac[0] * Jac[7]) - (Jac[1] * Jac[6])))
                    JacInv[8] = (_tmp1 * ((Jac[0] * Jac[4]) - (Jac[1] * Jac[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef double combine(
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
        ) nogil:
        cdef double result = 0.0

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef size_t n2 = _W.shape[2]
        cdef double _dv_001
        cdef double _dv_101
        cdef double _dv_011
        cdef double _du_002
        cdef double _du_100
        cdef double _du_010
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_001 = (VDv0[3*i0+1] * VDv1[3*i1+0] * VDv2[3*i2+0])
                    _dv_101 = (VDv0[3*i0+1] * VDv1[3*i1+0] * VDv2[3*i2+1])
                    _dv_011 = (VDv0[3*i0+1] * VDv1[3*i1+1] * VDv2[3*i2+0])
                    _du_002 = (VDu0[3*i0+2] * VDu1[3*i1+0] * VDu2[3*i2+0])
                    _du_100 = (VDu0[3*i0+0] * VDu1[3*i1+0] * VDu2[3*i2+1])
                    _du_010 = (VDu0[3*i0+0] * VDu1[3*i1+1] * VDu2[3*i2+0])
                    result += (((_du_002 * _dv_001) + ((((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) * ((JacInv[0] * _dv_101) + (JacInv[3] * _dv_011))) + (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) * ((JacInv[1] * _dv_101) + (JacInv[4] * _dv_011))))) * W)
        return result

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef double assemble_impl(self, size_t[3] i, size_t[3] j) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_i[3]
        cdef (double*) values_j[3]

        for k in range(3):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return 0.0      # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        return WaveAssembler_ST3D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_j[0], values_j[1], values_j[2],
                values_i[0], values_i[1], values_i[2],
        )

cdef class DivDivAssembler3D(BaseVectorAssembler3D):
    cdef vector[double[:, :, ::1]] C       # 1D basis values. Indices: basis function, mesh point, derivative
    cdef double[:, :, ::1] W
    cdef double[:, :, :, :, ::1] JacInv

    def __init__(self, kvs, geo):
        assert geo.dim == 3, "Geometry has wrong dimension"
        self.base_init(kvs)

        gaussgrid, gaussweights = make_tensor_quadrature([kv.mesh for kv in kvs], self.nqp)
        N = tuple(gg.shape[0] for gg in gaussgrid)  # grid dimensions

        self.C = compute_values_derivs(kvs, gaussgrid, derivs=1)

        geo_jac = geo.grid_jacobian(gaussgrid)
        gauss_weights = gaussweights[0][:,None,None] * gaussweights[1][None,:,None] * gaussweights[2][None,None,:]
        self.W = np.empty(N + ())
        self.JacInv = np.empty(N + (3, 3))
        DivDivAssembler3D.precompute_fields(
                gauss_weights,
                geo_jac,
                self.W,
                self.JacInv,
        )

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void precompute_fields(
            # input
            double[:, :, ::1] _GaussWeight,
            double[:, :, :, :, ::1] _Jac,
            # output
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
        ) nogil:
        cdef size_t n0 = _GaussWeight.shape[0]
        cdef size_t n1 = _GaussWeight.shape[1]
        cdef size_t n2 = _GaussWeight.shape[2]
        cdef double _tmp9
        cdef double _tmp10
        cdef double _tmp11
        cdef double _tmp2
        cdef double _tmp1
        cdef double GaussWeight
        cdef double* Jac
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    GaussWeight = _GaussWeight[i0, i1, i2]
                    Jac = &_Jac[i0, i1, i2, 0, 0]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _tmp9 = ((Jac[4] * Jac[8]) - (Jac[5] * Jac[7]))
                    _tmp10 = ((Jac[3] * Jac[8]) - (Jac[5] * Jac[6]))
                    _tmp11 = ((Jac[3] * Jac[7]) - (Jac[4] * Jac[6]))
                    _tmp2 = (((Jac[0] * _tmp9) - (Jac[1] * _tmp10)) + (Jac[2] * _tmp11))
                    _tmp1 = (1.0 / _tmp2)
                    W = (GaussWeight * fabs(_tmp2))
                    _W[i0, i1, i2] = W
                    JacInv[0] = (_tmp1 * _tmp9)
                    JacInv[1] = (_tmp1 * -((Jac[1] * Jac[8]) - (Jac[2] * Jac[7])))
                    JacInv[2] = (_tmp1 * ((Jac[1] * Jac[5]) - (Jac[2] * Jac[4])))
                    JacInv[3] = (_tmp1 * -_tmp10)
                    JacInv[4] = (_tmp1 * ((Jac[0] * Jac[8]) - (Jac[2] * Jac[6])))
                    JacInv[5] = (_tmp1 * -((Jac[0] * Jac[5]) - (Jac[2] * Jac[3])))
                    JacInv[6] = (_tmp1 * _tmp11)
                    JacInv[7] = (_tmp1 * -((Jac[0] * Jac[7]) - (Jac[1] * Jac[6])))
                    JacInv[8] = (_tmp1 * ((Jac[0] * Jac[4]) - (Jac[1] * Jac[3])))

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    @staticmethod
    cdef void combine(
            double[:, :, ::1] _W,
            double[:, :, :, :, ::1] _JacInv,
            double* VDu0, double* VDu1, double* VDu2,
            double* VDv0, double* VDv1, double* VDv2,
            double result[]
        ) nogil:

        cdef size_t n0 = _W.shape[0]
        cdef size_t n1 = _W.shape[1]
        cdef size_t n2 = _W.shape[2]
        cdef double _dv_100
        cdef double _dv_010
        cdef double _dv_001
        cdef double _tmp3
        cdef double _tmp7
        cdef double _tmp8
        cdef double _du_100
        cdef double _du_010
        cdef double _du_001
        cdef double _tmp4
        cdef double _tmp5
        cdef double _tmp6
        cdef double W
        cdef double* JacInv
        cdef size_t i0
        cdef size_t i1
        cdef size_t i2

        for i0 in range(n0):
            for i1 in range(n1):
                for i2 in range(n2):
                    W = _W[i0, i1, i2]
                    JacInv = &_JacInv[i0, i1, i2, 0, 0]

                    _dv_100 = (VDv0[2*i0+0] * VDv1[2*i1+0] * VDv2[2*i2+1])
                    _dv_010 = (VDv0[2*i0+0] * VDv1[2*i1+1] * VDv2[2*i2+0])
                    _dv_001 = (VDv0[2*i0+1] * VDv1[2*i1+0] * VDv2[2*i2+0])
                    _tmp3 = (((JacInv[0] * _dv_100) + (JacInv[3] * _dv_010)) + (JacInv[6] * _dv_001))
                    _tmp7 = (((JacInv[1] * _dv_100) + (JacInv[4] * _dv_010)) + (JacInv[7] * _dv_001))
                    _tmp8 = (((JacInv[2] * _dv_100) + (JacInv[5] * _dv_010)) + (JacInv[8] * _dv_001))
                    _du_100 = (VDu0[2*i0+0] * VDu1[2*i1+0] * VDu2[2*i2+1])
                    _du_010 = (VDu0[2*i0+0] * VDu1[2*i1+1] * VDu2[2*i2+0])
                    _du_001 = (VDu0[2*i0+1] * VDu1[2*i1+0] * VDu2[2*i2+0])
                    _tmp4 = (((JacInv[0] * _du_100) + (JacInv[3] * _du_010)) + (JacInv[6] * _du_001))
                    _tmp5 = (((JacInv[1] * _du_100) + (JacInv[4] * _du_010)) + (JacInv[7] * _du_001))
                    _tmp6 = (((JacInv[2] * _du_100) + (JacInv[5] * _du_010)) + (JacInv[8] * _du_001))
                    result[0] += ((_tmp3 * _tmp4) * W)
                    result[1] += ((_tmp3 * _tmp5) * W)
                    result[2] += ((_tmp3 * _tmp6) * W)
                    result[3] += ((_tmp7 * _tmp4) * W)
                    result[4] += ((_tmp7 * _tmp5) * W)
                    result[5] += ((_tmp7 * _tmp6) * W)
                    result[6] += ((_tmp8 * _tmp4) * W)
                    result[7] += ((_tmp8 * _tmp5) * W)
                    result[8] += ((_tmp8 * _tmp6) * W)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    @cython.initializedcheck(False)
    cdef void assemble_impl(self, size_t[3] i, size_t[3] j, double result[]) nogil:
        cdef int k
        cdef IntInterval intv
        cdef size_t g_sta[3]
        cdef size_t g_end[3]
        cdef (double*) values_i[3]
        cdef (double*) values_j[3]

        for k in range(3):
            intv = intersect_intervals(make_intv(self.meshsupp[k][i[k],0], self.meshsupp[k][i[k],1]),
                                       make_intv(self.meshsupp[k][j[k],0], self.meshsupp[k][j[k],1]))
            if intv.a >= intv.b:
                return       # no intersection of support
            g_sta[k] = self.nqp * intv.a    # start of Gauss nodes
            g_end[k] = self.nqp * intv.b    # end of Gauss nodes

            values_i[k] = &self.C[k][ i[k], g_sta[k], 0 ]
            values_j[k] = &self.C[k][ j[k], g_sta[k], 0 ]

        DivDivAssembler3D.combine(
                self.W [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                self.JacInv [ g_sta[0]:g_end[0], g_sta[1]:g_end[1], g_sta[2]:g_end[2] ],
                values_j[0], values_j[1], values_j[2],
                values_i[0], values_i[1], values_i[2],
                result
        )
